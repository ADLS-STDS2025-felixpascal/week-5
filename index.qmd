---
title: "Solution for Week 2: Raster Data Processing"
format: html
engine: knitr
---

# Task 5.1 — GDAL instead of R

In this task, I reimplement the forest area analysis from Task 3.1 using **GDAL command-line tools** instead of R packages.  
Execution time is measured using the **tictoc** package around bash chunks.

---

## Setup: Load R Packages & Reset Timer

```{r setup, message=FALSE, warning=FALSE}
library(tictoc)
library(tibble)
library(terra)
tictoc::tic.clearlog()
```

---

## Step 1: Extract forest areas from vector data

```{r}
tictoc::tic("Step 1: Extract forest polygons from GPKG")
```

```{bash}
ogr2ogr -f GPKG data/forests.gpkg data/SWISSTLM3D_2025.gpkg tlm_bb_bodenbedeckung -where "objektart = 'Wald'"
```

```{r}
tictoc::toc(log = TRUE)
```

---

## Step 2: Rasterize forest layer

```{r}
tictoc::tic("Step 2: Rasterize forest polygons")
```

```{bash}
gdal_rasterize -burn 1 -tr 25 25 -te 2480000 1070000 2850000 1290000 -a_nodata 0 -ot Byte -of GTiff -l tlm_bb_bodenbedeckung data/forests.gpkg data/forest_raster.tif
```

```{r}
tictoc::toc(log = TRUE)
```

---

## Step 3: Rasterize canton boundaries

```{r}
tictoc::tic("Step 3: Rasterize canton boundaries")
```

```{bash}
gdal_rasterize -a kantonsnummer -tr 25 25 -te 2480000 1070000 2850000 1290000 -a_nodata 0 -ot Byte -of GTiff -l tlm_kantonsgebiet data/swissBOUNDARIES3D_1_5_LV95_LN02.gpkg data/canton_raster.tif
```

```{r}
tictoc::toc(log = TRUE)
```

---

## Step 4: Zonal statistics in R (based on GDAL-generated rasters)

```{r}
tictoc::tic("Step 4: Zonal statistics using terra")

# Lade Raster
gdal_forest <- rast("data/forest_raster.tif")
gdal_cantons <- rast("data/canton_raster.tif")

# Waldfläche pro Kanton
gdal_forest_area <- zonal(gdal_forest, gdal_cantons, fun = "sum", na.rm = TRUE)
colnames(gdal_forest_area) <- c("Kanton", "ForestArea")

# Gesamtfläche pro Kanton
dummy_raster <- gdal_cantons
values(dummy_raster) <- 1
gdal_total_area <- zonal(dummy_raster, gdal_cantons, fun = "sum", na.rm = TRUE)
colnames(gdal_total_area) <- c("Kanton", "TotalArea")

# Umrechnen in Quadratmeter (25x25 m Pixel)
gdal_forest_area$ForestArea <- gdal_forest_area$ForestArea * 625
gdal_total_area$TotalArea <- gdal_total_area$TotalArea * 625

# Prozentuale Waldfläche
gdal_result <- merge(gdal_forest_area, gdal_total_area, by = "Kanton")
gdal_result$ForestPercent <- (gdal_result$ForestArea / gdal_result$TotalArea) * 100

tictoc::toc(log = TRUE)

print(gdal_result)
```

---

## Execution Time Log

```{r}
tictoc::tic.log(format = TRUE)
```

---

## Comparison with Terra-based approach (Task 3.1)

```{r}
# Runtime of the terra-based solution from week 2 (see: https://adls-stds2025-felixpascal.github.io/week-2/)
# This plot shows that the vector approach took over 500 seconds, while the raster-based version was much faster.
terra_raster_time <- 24     # Raster-based time from terra (based on previous work)
terra_vector_time <- 540    # Vector-based time from terra (based on previous work)

# Time from GDAL-based workflow using tictoc log
gdal_rawlog <- tictoc::tic.log(format = FALSE)
gdal_total <- sum(unlist(lapply(gdal_rawlog, function(x) x$toc - x$tic)))

comparison <- tibble(
  Method = c("terra (Vector)", "terra (Raster)", "GDAL CLI"),
  Time = c(terra_vector_time, terra_raster_time, gdal_total)
)

print(comparison)

library(ggplot2)
ggplot(comparison, aes(x = Method, y = Time, fill = Method)) +
  geom_col() +
  ylab("Time (seconds)") +
  ggtitle("Execution Time: Vector vs Raster Approach")
```

---

## Conclusion

In this task, I tried to repeat the forest coverage analysis from week 1 using GDAL tools instead of R. I used `ogr2ogr` to extract the forest polygons and `gdal_rasterize` to turn them into a raster file. The zonal statistics were still done in R, because I couldn’t get `gdal_zonalstats.py` to work on my system.

If I’ve done everything correctly, the results look pretty solid. The forest percentages for each canton seem reasonable and similar to what I got before.

When I compared the execution times, I was a bit surprised: the GDAL-based workflow was faster than the full vector-based approach with `terra`, but not really faster than the raster-based one. Actually, `terra` was slightly faster here. I guess this could be because the dataset isn’t very big, and maybe because I ran the GDAL steps inside Quarto, which adds some overhead.

Overall, I’d say GDAL is useful and worked well for the task, but for smaller datasets and when working directly in R, `terra` is also very efficient. For bigger projects or fully automated scripts, GDAL might still have an advantage.

